/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing/pkg/apis/eventing/v1alpha1"
)

// SchemaGroupLister helps list SchemaGroups.
type SchemaGroupLister interface {
	// List lists all SchemaGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SchemaGroup, err error)
	// SchemaGroups returns an object that can list and get SchemaGroups.
	SchemaGroups(namespace string) SchemaGroupNamespaceLister
	SchemaGroupListerExpansion
}

// schemaGroupLister implements the SchemaGroupLister interface.
type schemaGroupLister struct {
	indexer cache.Indexer
}

// NewSchemaGroupLister returns a new SchemaGroupLister.
func NewSchemaGroupLister(indexer cache.Indexer) SchemaGroupLister {
	return &schemaGroupLister{indexer: indexer}
}

// List lists all SchemaGroups in the indexer.
func (s *schemaGroupLister) List(selector labels.Selector) (ret []*v1alpha1.SchemaGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SchemaGroup))
	})
	return ret, err
}

// SchemaGroups returns an object that can list and get SchemaGroups.
func (s *schemaGroupLister) SchemaGroups(namespace string) SchemaGroupNamespaceLister {
	return schemaGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SchemaGroupNamespaceLister helps list and get SchemaGroups.
type SchemaGroupNamespaceLister interface {
	// List lists all SchemaGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SchemaGroup, err error)
	// Get retrieves the SchemaGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SchemaGroup, error)
	SchemaGroupNamespaceListerExpansion
}

// schemaGroupNamespaceLister implements the SchemaGroupNamespaceLister
// interface.
type schemaGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SchemaGroups in the indexer for a given namespace.
func (s schemaGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SchemaGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SchemaGroup))
	})
	return ret, err
}

// Get retrieves the SchemaGroup from the indexer for a given namespace and name.
func (s schemaGroupNamespaceLister) Get(name string) (*v1alpha1.SchemaGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("schemagroup"), name)
	}
	return obj.(*v1alpha1.SchemaGroup), nil
}
