/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing/contrib/gcppubsub/pkg/apis/messaging/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudPubSubChannelLister helps list GoogleCloudPubSubChannels.
type GoogleCloudPubSubChannelLister interface {
	// List lists all GoogleCloudPubSubChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubChannel, err error)
	// GoogleCloudPubSubChannels returns an object that can list and get GoogleCloudPubSubChannels.
	GoogleCloudPubSubChannels(namespace string) GoogleCloudPubSubChannelNamespaceLister
	GoogleCloudPubSubChannelListerExpansion
}

// googleCloudPubSubChannelLister implements the GoogleCloudPubSubChannelLister interface.
type googleCloudPubSubChannelLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudPubSubChannelLister returns a new GoogleCloudPubSubChannelLister.
func NewGoogleCloudPubSubChannelLister(indexer cache.Indexer) GoogleCloudPubSubChannelLister {
	return &googleCloudPubSubChannelLister{indexer: indexer}
}

// List lists all GoogleCloudPubSubChannels in the indexer.
func (s *googleCloudPubSubChannelLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudPubSubChannel))
	})
	return ret, err
}

// GoogleCloudPubSubChannels returns an object that can list and get GoogleCloudPubSubChannels.
func (s *googleCloudPubSubChannelLister) GoogleCloudPubSubChannels(namespace string) GoogleCloudPubSubChannelNamespaceLister {
	return googleCloudPubSubChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudPubSubChannelNamespaceLister helps list and get GoogleCloudPubSubChannels.
type GoogleCloudPubSubChannelNamespaceLister interface {
	// List lists all GoogleCloudPubSubChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubChannel, err error)
	// Get retrieves the GoogleCloudPubSubChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GoogleCloudPubSubChannel, error)
	GoogleCloudPubSubChannelNamespaceListerExpansion
}

// googleCloudPubSubChannelNamespaceLister implements the GoogleCloudPubSubChannelNamespaceLister
// interface.
type googleCloudPubSubChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudPubSubChannels in the indexer for a given namespace.
func (s googleCloudPubSubChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudPubSubChannel))
	})
	return ret, err
}

// Get retrieves the GoogleCloudPubSubChannel from the indexer for a given namespace and name.
func (s googleCloudPubSubChannelNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudPubSubChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudpubsubchannel"), name)
	}
	return obj.(*v1alpha1.GoogleCloudPubSubChannel), nil
}
